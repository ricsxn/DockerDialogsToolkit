#!/bin/bash
#
# Docker ToolKit consists of several functions to ease the management
# of docker containers
#
# Author: Riccardo Bruno <riccardo.bruno@ct.infn.it>
#

#
# Help
#

dtk_help() {
cat <<EOF
This script defines the core functions for ddt_* commands. These functions can be used directly by the user offering a very productive set of shortcuts for the most popular commands used during docker container managermaent.
All functions defined in dtk script are referring to the target docker container using the container id as parameter or inside the environment variable \$CNT\
Below the list of possible commands divided by topics:

Containers
 'dattach' Opens a bash terminal against the specified container
 'dstart' Start the specified container
 'dstop' Stop the specified container
 'drm' Remove the specified container (Eventually it stops running containers)
 'dlogs' Show container logs
 'dlogsf' Show container logs in append mode
 'dps' Show the list of contaners
 'dexe'  Execute a command on top of the specified container
 'dkill' Stop and then remove the specified container
 'dip' Show IP address of the selected container
 'dinspect' Inspects the selected container

Images
 'dimgls' List available images
 'dimgcon' Connect to specified image (Opens a /bin/bash)
 'dimgrun' Execute the given image as daemon
 
Misc.
 'dtk_help' Print this message
 'dclean' Cleanup stopped containers and untagged images
EOF
}

#
# Containers
#

dattach() {
 [ "$CNT" = "" ] && CNT=$1
 [ "$CNT" = "" ] &&\
   echo "usage: dattach <container_id> or CNT=<container_id>; dattach" ||\
   docker exec -it $CNT /bin/bash -c "stty cols $COLUMNS rows $LINES && /bin/bash --login"
}
export -f dattach

dstart() {
 [ "$CNT" = "" ] && CNT=$1
 [ "$CNT" = "" ] &&\
   echo "usage: dstart <container_id> or CNT=<container_id>; dstart" ||\
   docker start $CNT
}
export -f dstart

dstop() {
 [ "$CNT" = "" ] && CNT=$1
 [ "$CNT" = "" ] &&\
   echo "usage: dstop <container_id> or CNT=<container_id>; dstop" ||\
   docker stop $CNT
}
export -f dstop

drestart() {
  dstop && dstart
}
export -f drestart

drm() {
 [ "$CNT" = "" ] && CNT=$1
 [ "$CNT" = "" ] &&\
   echo "usage: drm <container_id> or CNT=<container_id>; drm" && return 0 ||\
   ([ "true" == "$(docker inspect $CNT | jq '.[0].State.Running')" ] &&\
      docker stop $CNT &&\
      docker rm $CNT ||\
      docker rm $CNT)
}
export -f drm

dlogs() { 
<<<<<<< HEAD
 [ "$CNT" = "" ] && CNT=$1
=======
 [ "$CNT" != "" ] && CNT=$1 && shift 1
>>>>>>> b07c6bb (fix dlogs)
 [ "$CNT" = "" ] &&\
   echo "usage: dlogs <container_id> or CNT=<container_id>; dlogs" ||\
   docker logs $CNT
}
export -f dlogs

dlogsf() { 
 [ "$CNT" = "" ] && CNT=$1
 [ "$CNT" = "" ] &&\
   echo "usage: dlogsf <container_id> or CNT=<container_id>; dlogsf" ||\
   docker logs --follow $CNT
}
export -f dlogsf

dps() {
 docker ps -a
}
export -f dps

dexe() {
 [ "$CNT" = "" ] &&\
   docker exec -ti $* ||\
   docker exec $CNT $*
}
export -f dexe

dkill() {
  [ "$CNT" = "" ] &&\
    CONTAINER_IDS="$*" ||\
    CONTAINER_IDS=$CNT
  [ ! -z "$CONTAINER_IDS" ] &&\
    for c in $CONTAINER_IDS; do\
      dstop $c &&\
      drm $c;\
    done || echo "Usage dkill <container_id> or CNT=<container_id>; dkill"
}
export -f dkill

dip() {
  [ "$CNT" = "" ] && CNT=$1
  [ "$CNT" = "" ] &&\
    echo "Usage dip <container_id> or CNT=<container_id>; dip" ||\
    docker inspect $CNT |\
    jq '.[].NetworkSettings.Networks' |\
    grep IPAddress |\
    awk '{ print $2 }' |\
    sed s/\"//g |\
    sed s/,//g
}

dinspect() {
  [ "$CNT" = "" ] && CNT=$1
  [ "$CNT" = "" ] &&\
    echo "Usage dip <container_id> or CNT=<container_id>; dip" ||\
    docker inspect $CNT | jq '.'
}

#
# Images
#

dimgls() {
  docker image list
}

dimgcon() {
  [ "$IMG" = "" ] && IMG=$1
  [ "$IMG" = "" ] &&\
    echo "Usage dimgcon  <image_id> or IMG=<image_id>; dimgcon" ||\
    docker run --cidfile=".$IMG" -it $IMG /bin/bash
}

dimgrun() {
  [ "$IMG" = "" ] && IMG=$1 && CNM=$2
  [ "$CNM" = "" ] && CNMOPT="" || CNMOPT="--name $CNM"
  [ "$IMG" = "" ] &&\
    echo "Usage dimgrun <image_id> <container_name> or IMG=<image_id> [CNM=<container_name>]; dimgcon" ||\
    docker run -d $CNMOPT $IMG
}

#
# Misc
#

dclean() {
   echo "Cleaning stopped containers" &&\
   docker ps -aq --no-trunc -f status=exited | xargs docker rm &&\
   echo "Cleaning untagged images" &&\
   docker images -q --filter dangling=true | xargs docker rmi
}
